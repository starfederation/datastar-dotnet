// This is auto-generated by Datastar. DO NOT EDIT.

namespace StarFederation.Datastar.FSharp

open System

type ElementPatchMode =
/// Morphs the element into the existing element.
| Outer
/// Replaces the inner HTML of the existing element.
| Inner
/// Removes the existing element.
| Remove
/// Replaces the existing element with the new element.
| Replace
/// Prepends the element inside to the existing element.
| Prepend
/// Appends the element inside the existing element.
| Append
/// Inserts the element before the existing element.
| Before
/// Inserts the element after the existing element.
| After

type EventType =
/// An event for patching HTML elements into the DOM.
| PatchElements
/// An event for patching signals.
| PatchSignals


module Consts =
    let [<Literal>] DatastarKey               = "datastar"
    let [<Literal>] Version                   = "1.0.0-RC.1"

    /// Default: TimeSpan.FromMilliseconds 1000
    let DefaultSseRetryDuration = TimeSpan.FromMilliseconds 1000


    /// Default: outer - Morphs the element into the existing element.
    let DefaultElementPatchMode = Outer

    let [<Literal>] DefaultElementsUseViewTransitions = false
    let [<Literal>] DefaultPatchSignalsOnlyIfMissing = false


    let [<Literal>] DatastarDatalineSelector = "selector"
    let [<Literal>] DatastarDatalineMode = "mode"
    let [<Literal>] DatastarDatalineElements = "elements"
    let [<Literal>] DatastarDatalineUseViewTransition = "useViewTransition"
    let [<Literal>] DatastarDatalineSignals = "signals"
    let [<Literal>] DatastarDatalineOnlyIfMissing = "onlyIfMissing"

    module ElementPatchMode =
        let inline toString this =
            match this with
                | ElementPatchMode.Outer -> "outer"
                | ElementPatchMode.Inner -> "inner"
                | ElementPatchMode.Remove -> "remove"
                | ElementPatchMode.Replace -> "replace"
                | ElementPatchMode.Prepend -> "prepend"
                | ElementPatchMode.Append -> "append"
                | ElementPatchMode.Before -> "before"
                | ElementPatchMode.After -> "after"

    module EventType =
        let inline toString this =
            match this with
                | EventType.PatchElements -> "datastar-patch-elements"
                | EventType.PatchSignals -> "datastar-patch-signals"